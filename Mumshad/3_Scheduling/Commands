######### Commands ###########

- Manual scheduling of a pod

----------------------------
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
      - containerPort: 8080
  nodeName: node01		<<<< Allocate a pod to the node ****
----------------------------




############
1) Labels :
############

# kubectl get pods --selector app=App1 ****
				
				- Select the pods based on labels and selectors


# k get pod --selector bu=finance
# k get pod --selector env=dev
				
				- Select the pods based on labels


# k get all --selector env=prod

				- Select all the objects including pods, service, replicaset based on env=prod


# k get pod --selector env=prod,bu=finance,tier=frontend ****
	
				- Select a pod based on many selectors


--------------------------



############
2) Taints :
############


# k describe node node01 | grep -i Taint

# k taint nodes node01 spray=mortein:NoSchedule

- Set a pod with follwing toleration

			Image name: nginx
			Key: spray
			Value: mortein
			Effect: NoSchedule
			Status: Running

	master $ cat bee.yaml
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null
	  labels:
	    run: mosquito
	  name: bee
	spec:
	  containers:
	  - image: nginx
	    name: mosquito
	    resources: {}
	  tolerations:
	  - key: "spray"
	    operator: "Equal"
	    value: "mortein"
	    effect: "NoSchedule"
	  dnsPolicy: ClusterFirst
	  restartPolicy: Never
	status: {}


# kubectl taint nodes master node-role.kubernetes.io/master:NoSchedule-   ****
	node/master untainted

			- Remove the taint of a node




################################################
3) Labels and NodeAffinity ----------
################################################


# kubectl label node node01 color=blue
	
		- apply a label to the running node


# k create deploy blue --image=nginx $do > blue.yaml
  -- edit replicas: 6

# k create deployment blue --image=nginx --replicas=6 --dry-run -o yaml > blue.yaml

		- Run deployment with 6 replicas

		-**** check for node affinity in exam

------- definition to add affinity ----------
   spec:
      containers:
      - image: nginx
        name: blue
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: color
                operator: In
                values:
                - blue
-----------------------------------------------

- Create a new deployment named 'red' with the NGINX image and 3 replicas, and ensure it gets placed on the master node only.
Use the label - node-role.kubernetes.io/master - set on the master node.

# k run red --image=nginx --replicas=3 --dry-run -o yaml > red.yaml ****

------- definition to add to check only if label exists or not -------------
   spec:
      containers:
      - image: nginx
        name: red
        resources: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
----------------------------------------------------------------------------




################################################
4) Resource requirements and Limits :
################################################

	# k describe pod rabbit | grep -i cpu -A4

		- Identify the CPU requirement set on Pod.

	
	# k get pod
	NAME       READY   STATUS      RESTARTS   AGE
	elephant   0/1     OOMKilled   5          3m14s

		- OOMKilled means pod doesn't have sufficient memory.


	# k get pod elephant -o yaml > new_pod.yaml

		- To change the memory limit of a pod.





########################
5) DaemonSet :
########################

	- How to create a DeamonSet. ****

		1) First create a Deployment and redirect the output to yaml file. ****
				-- remove unnecessary fields
		2) Then edit the deployment and change the "kind: DaemonSet".

	------------------------- Daemon Set -----------------------
	apiVersion: apps/v1
	kind: DaemonSet         	<<<< Change the Kind here.
	metadata:
	  name: monitroing-daemon
	spec:
	  selector:
	    matchLabels:
	      app: monitoring-daemon
	  template:
	    metadata:
	      labels:
	        app: monitoring-daemon
	    spec:
	      containers:
	      - name: monitoring-daemon
	        image: monitoring-daemon
	------------------------------------------------------------


	# k get daemonsets --all-namespaces

			- To list down the daemonsets

	# k describe daemonset kube-proxy --namespace=kube-system

	# k describe daemonset weave-net -n kube-system	


	- Deploy a DaemonSet for FluentD Logging.

		Name: elasticsearch
		Namespace: kube-system
		Image: k8s.gcr.io/fluentd-elasticsearch:1.20

		# k create deployment elasticsearch --image=k8s.gcr.io/fluentd-elasticsearch:1.20 -n kube-system --dry-run -o yaml > elastic-daemon.yaml

		- Edit the elastic-daemon.yaml file and replace the kind with "DaemonSet", remove the unrequired things.

		# vim elastic-daemon.yaml			

		# k create -f elastic-daemon.yaml
		daemonset.apps/elasticsearch created




########################
6) Static pods :
########################

	- Create a static pod :

	# kubectl run static-busybox $do --image=busybox --command -- sleep 1000 > /etc/kubernetes/manifests/static-busybox.yaml

	
	---------------- static pod sleep def -------------------------
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null  
	  labels: 
	    run: static-busybox  
	    name: static-busybox
	spec:
	  containers:
	  - command:			<<<< Here we specify commands
	    - sleep
	    - "1000"    
	    image: busybox
	    name: static-busybox
	    resources: {}
	  dnsPolicy: ClusterFirst
	  restartPolicy: Never
	status: {}
	---------------------------------------------------------------


	- Get the IP address of the nodes using the kubectl command.

	# k get nodes -o wide
	NAME     STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
	master   Ready    master   30m   v1.16.0   172.17.0.15   <none>        Ubuntu 16.04.6 LTS   4.4.0-166-generic   docker://18.9.7
	node01   Ready    <none>   29m   v1.16.0   172.17.0.19   <none>        Ubuntu 16.04.6 LTS   4.4.0-166-generic   docker://18.9.7


	- Look for the static pod manifest path.

	# cat /var/lib/kubelet/config.yaml | grep -i static
	staticPodPath: /etc/just-to-mess-with-you



########################
7) Multiple Scheduler:
########################

	- Deploy an additional scheduler to the cluster following the given specification.
		- Use the manifest file used by kubeadm tool. Use a different port than the one used by the current one.

		Namespace: kube-system
		Name: my-scheduler
		Status: Running
		Custom Scheduler Name

		# cd /etc/kubernetes/manifests/
		# cp kube-scheduler.yaml my-scheduler.yaml
		--------------------- edit the my-scheduler -----------------------------
		cat my-scheduler.yaml
		apiVersion: v1
		kind: Pod
		metadata:
		  creationTimestamp: null
		  labels:
		    component: kube-scheduler
		    tier: control-plane
		  name: my-scheduler           <<<<
		  namespace: kube-system
		spec:
		  containers:
		  - command:
		    - kube-scheduler
		    - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
		    - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
		    - --bind-address=127.0.0.1
		    - --kubeconfig=/etc/kubernetes/scheduler.conf
    		- --leader-elect=false
    		- --port=10282
		    - --scheduler-name=my-scheduler          <<<<
		    - --secure-port=0
		    image: k8s.gcr.io/kube-scheduler:v1.16.0
		    imagePullPolicy: IfNotPresent
		-------------------------------------------------------------------------

		# k get pod -n kube-system | grep -i my-scheduler
		my-scheduler-master              1/1     Running            0          4m7s


	- create a POD with the new custom scheduler.

	------------------------------------------------
	cat nginx-pod.yaml
	apiVersion: v1
	kind: Pod
	metadata:
	  name: nginx
	spec:
	  containers:
	  -  image: nginx
	     name: nginx
	  schedulerName: my-scheduler
	------------------------------------------------