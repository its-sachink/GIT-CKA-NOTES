############## Notes ###############


- Rolling Updates and Rollbacks in Deployment

	Rollout1 	-->		Revision1		--> nginx1.7.0
	Rollout2	-->		Revision2		--> nginx1.7.1


	- To see status of rollout
		
		# kubectl rollout status deployment-name


	- To see revision and history of rollout

		# kubectl rollout history deployment-name


	- Deployment Strategy :

		- Recreate
		- Rollout : is the default strategy


	- Updating could include docker-version, labels and number of replicas

	- After making changes to deployment.yaml file run

				# kubectl apply -f deployment.yaml


				# kubectl set image deployment-name nginx=nginx:1.9.1

							- This will not make a change to your yaml pod definition file


	- The recreate and rolling upgrade startegy can be seen from "kubectl describe deployment-name"

	-** Deployment creates a ReplicaSet


	- To undo the deployment

		# kubectl rollout undo deployment-name


	- You can see the new and older replicaset before and after deployment using below command

		# kubectl get replicasets

	
	- To create deployment

		# kubectl run nginx --image=nginx


	- Summary :

		- create deployment
			# kubectl create -f deployment-name.yaml

		- get deployment
			# kubectl get deployments

		- update deployment
			# kubectl apply -f new-definition.yaml

			# kubectl set image deployment nginx=nginx:1.9.1

		- Status of rollout deployment
			# kubectl rollout status deployment-name

			# kubectl rollout history deplyoment-name

		- Rollback
			# kubectl rollout undo deployment-name
	


- Configure Applications
	- Configuring applications comprises of understanding the following concepts:
	- Configuring Command and Arguments on applications
	- Configuring Environment Variables
	- Configuring Secrets


- Commands

	- How to override the docker default command at run time

		# docker run ubuntu sleep 5

	- Commands can be specified using below format

		FROM ubuntu
		CMD sleep 5		or 		CMD["command","param1"]

		# docker built -t ubuntu-sleeper .
		# docker run ubuntu-sleeper

		- to override

		# docker run ubuntu-sleeper sleep 10


	- If you only want to pass in number of seconds like

		# docker run ubuntu-sleeper 10

		FROM ubuntu
		ENTRYPOINT ["sleep"]

		- ENTRYPOINT : command line parameters are appended
		- CMD : command line parameter passed will get replaced entirely


	- What if "10" is not mentioned and we need to give some default parameter

		FROM ubuntu
		ENTRYPOINT ["sleep"]
		CMD["5"]

			# docker run ubuntu-sleeper		<<<< here the default value remains 5
			# docker run ubuntu-sleeper 10	<<<< here the value is overriden

			- You need to give JSON format for this


	- What if you want to modify Entrypoint totally

			# docker run --entrypoint sleep2.0 ubuntu-sleeper 10



- Commands and Arguments in Kubernetes pod


		- If you want to override the argument from "5" to "10"

		# docker run --name ubuntu-sleeper ubuntu-sleeper
		--------------------------------------------------
		FROM ubuntu
		ENTRYPOINT ["sleep"]
		CMD ["5"]
		--------------------------------------------------

			- at this point you need to write the pod definition file like below

			# docker run --name ubuntu-sleeper ubuntu-sleeper 10
			------------------------------------------
			apiVersion:v1
			kind: Pod
			metadata:
			  name: ubuntu-sleeper-pod
			spec:
			  containers:
			    name: ubuntu-sleeper
			    image: ubuntu-sleeper
			    args: ["10"]
			------------------------------------------



		- If you want to change the entrypoint option along with the args

			# docker run --name ubuntu-sleeper --entrypoint sleep2.0 ubuntu-sleeper 10
			------------------------------------------
			apiVersion:v1
			kind: Pod
			metadata:
			  name: ubuntu-sleeper-pod
			spec:
			  containers:
			    name: ubuntu-sleeper
			    image: ubuntu-sleeper
			    command: ["sleep2.0"]
			    args: ["10"]
			------------------------------------------			

			- please note that "cmd" in pod definition file is not same as "cmd" in docker file, instead it represent --entrypoint. If defined in a pod it is overwritten in a container.

				ENTRYPOINT["sleep2.0"]  --> command:["sleep2.0"]
				CMD["5"]  -->  args:["10"]



- Configure Environment Variables in Kubernetes :

			------------------------------------------
			apiVersion:v1
			kind: Pod
			metadata:
			  name: ubuntu-sleeper-pod
			spec:
			  containers:
			  - name: ubuntu-sleeper
			    image: ubuntu-sleeper
			    env:
			      - name: APP_COLOR
			        value: pink
			------------------------------------------	

			- We can also set the environment variables using configmap and secrets.


- Configuring ConfigMaps in Applications :

	- Imperative approach :

		# kubectl create configmap \
			app-config --from-literal=APP_COLOR=blue \
					   --from-literal=APP_MOD=prod

		OR

		# kubectl create configmap \
			app-config --from-file=app_config.properties


	- Declarative approach :

		---------------------- config-map.yaml -------------------
		apiVersion: v1
		kind: ConfigMap
		metadata:
		  name: app-config
		data:
		  APP_COLOR: blue
		  APP_MODE: prod
		-----------------------------------------------------------

		# kubectl create -f config-map.yaml


	- view configmap

		# kubectl get configmaps

		# kubectl describe configmaps



	- Configure a configmap with Pod

		----------------------------------------------------------------
		apiVersion: v1
		kind: Pod
		metadata:
		  name: simple-webapp-color
		spec:
		  containers:
		  - name: simple-webapp-color
		    image: simple-webapp-color
		    ports:
		      -containerPort: 8080
		    envFrom:
		      - configMapRef:
		          name: app-config
		----------------------------------------------------------------


	- ConfigMap in pods

		- ENV:
		------------------------------------------------------
		envFrom:
		  - configMapRef:
		       name: app-config
		------------------------------------------------------

		- SINGLE ENV:
		------------------------------------------------------
		env:
		  - name: APP COLOR
		    valueFrom:
		      configMapKeyRef:
		        name: app-config
		        key: APP COLOR
		------------------------------------------------------		

		- VOLUME:
		------------------------------------------------------
		volumes:
		- name: app-config-volume
		  configMap:
		    name: app-config
		------------------------------------------------------


- Configure Secrets in Kubernetes :

	- Specify secret into encoded format:

		# echo -n 'mysql' | base64
		bX1zcWw=

		# echo -n 'root' | base64
		cm9vA==

		# echo -n 'passwd' | base64
		cGFzd3Jk

	- Decode a hashed value:

		# echo -n 'bX1zcWw=' | base64 --decode

		# echo -n 'cm9vA==' | base64 --decode

		# echo -n 'cGFzd3Jk' | base64 --decode


	- Create a secret using 2 methods :

		- Imperative method :

			# kubectl create secret generic \
				app-secret 	--from-literal=DB_HOST=mysql \
							--from-literal=DB_User=root \
							--from-literal=DB_Password=passwd

			# kubectl create secret generic \
				app-secret --from-file=app_secret.properties

			---------------- app_Secret.properties --------------------
			DB_Host: bX1zcWw=
			DB_User: cm9vA==
			DB_Password: cGFzd3Jk
			-----------------------------------------------------------


		- Declarative method :

			# kubectl create -f secret-data.yaml
			----------------------- secret-data.yaml -----------------------------------
			apiVersion: v1
			kind: Secret
			metadata:
			  name: app-secret
			data:
			  DB_Host: bX1zcWw=
			  DB_User: cm9vA==
			  DB_Password: cGFzd3Jk
			----------------------------------------------------------

			# kubectl get secrets
			# kubectl describe secrets
			# kubectl get secret app-secret -o yaml


		- Specify a secret in a Pod :

		----------------------------------------------------------------
		apiVersion: v1
		kind: Pod
		metadata:
		  name: simple-webapp-color
		spec:
		  containers:
		  - name: simple-webapp-color
		    image: simple-webapp-color
		    ports:
		      - containerPort: 8080
		    envFrom:
		      - secretRef:
		          name: app-secret
		----------------------------------------------------------------

	- Inject a secret using single env:

		-----------------------------------------------------------------
		env:
		  - name: DB Password
		    valueFrom:
		      secretKeyRef:
		        name: app-secret
		        key: DB Password
		-----------------------------------------------------------------

	- Inject a secret as a volume:

		- Each attribute is created as a volume
		-----------------------------------------------------------------
		volumes:
		  - name: app-secret-volume
		    secret:
		      secretName: app-secret
		-----------------------------------------------------------------

	- As in best practices like:

		- Not checking-in secret object definition files to source code repositories.

		- Enabling Encryption at Rest for Secrets so they are stored encrypted in ETCD. 



		Also the way kubernetes handles secrets. Such as:

			- A secret is only sent to a node if a pod on that node requires it.

			- Kubelet stores the secret into a tmpfs so that the secret is not written to disk storage.

			- Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well.


- Scaling Application :
	
	- We have already discussed about scaling applications in the Deployments and Rolling updates and Rollback sections.


- Multi Container Pods :
	
	- You may need 2 services to work together like the "log agent" and "web agent" together.
	- Thus we may need to run multi-containers with in a same pod.


		----------------------------------------------------------------
		apiVersion: v1
		kind: Pod
		metadata:
		  name: simple-webapp-color
		spec:
		  containers:
		  - name: simple-webapp-color
		    image: simple-webapp-color
		    ports:
		      -containerPort: 8080
		  - name: log-agent					<<<< multi-container pod
		    image: log-agent
		------------------------------------------------------------------


	- Design patterns :

		- SideCar : Asked in CKA
		- Adapter : Asked in CKAD
		- Ambassador : Asked in CKAD


	- InitContainers :

		- Generally the container's stays alive as long as the POD's lifecycle. If the container fails then Pod is restarted.
		- But some container are used run a task that will be run only  one time when the pod is first created. Or a process that waits  for an external service or database to be up before the actual application starts.
		- These are called "InitContainers".

		----------------------- Init Containers -----------------------------
		apiVersion: v1
		kind: Pod
		metadata:
		  name: myapp-pod
		  labels:
		    app: myapp
		spec:
		  containers:
		  - name: myapp-container
		    image: busybox:1.28
		    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
		  initContainers:
		  - name: init-myservice
		    image: busybox
		    command: ['sh', '-c', 'git clone <some-repository-that-will-be-used-by-application> ; done;']
		---------------------------------------------------------------------

		- When a POD is first created the initContainer is run, and the process in the initContainer must run to a completion before the real container hosting the application starts. 
		

		- You can configure multiple such InitContainers.
		- In that case each init container is run one at a time in sequential order.
		- If any of the initContainers fail to complete, Kubernetes restarts the Pod repeatedly until the Init Container succeeds.

		----------------------- Multiple Init Containers -----------------------------
		apiVersion: v1
		kind: Pod
		metadata:
		  name: myapp-pod
		  labels:
		    app: myapp
		spec:
		  containers:
		  - name: myapp-container
		    image: busybox:1.28
		    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
		  initContainers:
		  - name: init-myservice
		    image: busybox:1.28
		    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
		  - name: init-mydb
		    image: busybox:1.28
		    command: ['sh', '-c', 'until nslookup mydb; do echo waiting for mydb; sleep 2; done;']
		------------------------------------------------------------------------------

		- https://kubernetes.io/docs/concepts/workloads/pods/init-containers/

	- Self Healing Application : 

	Kubernetes supports self-healing applications through ReplicaSets and Replication Controllers. The replication controller helps in ensuring that a POD is re-created automatically when the application within the POD crashes. It helps in ensuring enough replicas of the application are running at all times.

	Kubernetes provides additional support to check the health of applications running within PODs and take necessary actions through Liveness and Readiness Probes. However these are not required for the CKA exam and as such they are not covered here. These are topics for the Certified Kubernetes Application Developers (CKAD) exam and are covered in the CKAD course.