################ Commands ##################

2) The application stores logs at location /log/app.log. View the logs.

	# kubectl exec webapp -- tail -f /log/app.log


4) Configure a volume to store these logs at /var/log/webapp on the host

		Name: webapp
		Image Name: kodekloud/event-simulator
		Volume HostPath: /var/log/webapp
		Volume Mount: /log

	search "hostpath volume" in k8.io, click on second link of "configure a pod to use a persistentvolume"

	--------------------------------------------------
	master $ k run webapp --image=kodekloud/event-simulator $do > webapp.yaml
	master $ vim webapp.yaml
	master $ cat webapp.yaml
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null
	  labels:
	    run: webapp
	  name: webapp
	spec:
	  containers:
	  - image: kodekloud/event-simulator
	    name: webapp
	    volumeMounts:
	    - mountPath: /log
	      name: test-volume
	  volumes:
	  - name: test-volume
	    hostPath:
	      # directory location on host
	      path: /var/log/webapp
	      # this field is optional
	      type: Directory	
	--------------------------------------------------



5) Create a 'Persistent Volume' with the given specification.

		Volume Name: pv-log
		Storage: 100Mi
		Access modes: ReadWriteMany
		Host Path: /pv/log

	--------------------------------------------------
	apiVersion: v1
	kind: PersistentVolume
	metadata:
	  name: pv-log
	spec:
	  capacity:
	    storage: 100Mi
	  accessModes:
	    - ReadWriteMany
	  hostPath:
	    path: "/pv/log"
	--------------------------------------------------	


6) Let us claim some of that storage for our application. Create a 'Persistent Volume Claim' with the given specification.

	Volume Name: claim-log-1
	Storage Request: 50Mi
	Access modes: ReadWriteOnce

	--------------------------------------------------	
	apiVersion: v1
	kind: PersistentVolumeClaim
	metadata:
	  name: claim-log-1
	spec:
	  accessModes:
	    - ReadWriteOnce
	  resources:
	    requests:
	      storage: 50Mi
	--------------------------------------------------	


7) Why is the Claim not bound to the available Persistent Volume?

	>>>> The Access Modes set on the PV and the PVC do not match



10 ) Update the Access Mode on the claim to bind it to the PVC. Delete and recreate the claim-log-1.

	
		- Set the Access Mode on the PVC to 'ReadWriteMany'.

		Volume Name: claim-log-1
		Storage Request: 50Mi
		PVol: pv-log
		Status: Bound

	--------------------------------------------------	
	apiVersion: v1
	kind: PersistentVolumeClaim
	metadata:
	  name: claim-log-1
	spec:
	  accessModes:
	    - ReadWriteMany
	  resources:
	    requests:
	      storage: 50Mi
	--------------------------------------------------	


11) You requested for 50Mi, how much capacity is now available to the PVC?

		>>>> 100Mi



12) Update the webapp pod to use the persistent volume claim as its storage.
		
		Replace "hostPath" configured earlier with the newly created "PersistentVolumeClaim"

		Name: webapp
		Image Name: kodekloud/event-simulator
		Volume: PersistentVolumeClaim=claim-log-1
		Volume Mount: /log

	--------------------------------------------------	
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null
	  labels:
	    run: webapp
	  name: webapp
	spec:
	  containers:
	  - image: kodekloud/event-simulator
	    name: webapp
	    volumeMounts:
	    - mountPath: /log
	      name: test-volume
	  volumes:
	  - name: test-volume
	    persistentVolumeClaim:
	      claimName: claim-log-1
	--------------------------------------------------	