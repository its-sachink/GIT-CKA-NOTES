############## Commands ################

53 is DNS port number




# openssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout

# /etc/kubernetes/manifests/etcd.yaml

# /etc/kubernetes/pki/etcd/
# /etc/kubernetes/pki

- Search "csr" in kubernetes.io to create new CSR

# kubectl certificate approve akshay

# kubectl certificate deny agent-smith

# k delete csr agent-smith

----------------------------------------------

# kubectl config view

# kubectl config view --kubeconfig /root/my-kube-config

# kubectl config --kubeconfig=/root/my-kube-config use-context research

# kubectl config current-context

-----------------------------------------------

- identify the authorization 
	
	# k describe pod kube-apiserver-master -n kube-system | grep -i auth
      --authorization-mode=Node,RBAC
	  
# k get role --all-namespaces --no-headers | wc -l
12

# k get rolebinding -n kube-system
# k describe rolebinding kube-proxy -n kube-proxy

# k get pods --as dev-user

- Search for "role" in the kubernetes.io

# k get role developer -n blue -o yaml > developer-role-blue.yaml

# k edit role developer -n blue

- Search for "role" in the kubernetes.io >> at right side click on "Referring to resources"
	
	# k create deployment nginx --image=nginx -- as dev-user -n blkubectl api-resources | grep -i storageclassesue
	
-------------------

# k describe clusterrolebinding cluster-admin

----

- To get a API groups of a resources

# kubectl api-resources | grep -i volumes
persistentvolumes                 pv                                          false        PersistentVolume
# kubectl api-resources | grep -i storageclasses
storageclasses                    sc           storage.k8s.io                 false        StorageClass

--------------
cat storage-admin-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: storage-admin
rules:
- apiGroups: ["","storage.k8s.io"]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["persistentvolumes","storageclasses"]
  verbs: ["get","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: michelle-storage-admin
subjects:
- kind: User
  name: michelle # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: storage-admin
  apiGroup: rbac.authorization.k8s.io
--------------

OR

cat /var/answers/michelle-storage-admin.yaml
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: storage-admin
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "watch", "list", "create", "delete"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "watch", "list", "create", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: michelle-storage-admin
subjects:
- kind: User
  name: michelle
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: storage-admin
  apiGroup: rbac.authorization.k8s.iomaster
  
------ Image security ----------

- search for "docker-regsitry" in k8.io

	- Prepend registry name before the container image
------
  imagePullSecrets:
  - name: private-reg-cred
------

k create secret docker-registry private-reg-cred --docker-server=myprivateregistry.com:5000 --docker-username=dock_user --docker-password=dock_password --docker-email=dock_user@myprivateregistry.com


------- security context --------

- search for "security context" in kubernetes.io page

kubectl exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'

-------
error: unable to match a printer suitable for the output format "wdie", allowed formats are: custom-columns,custom-columns-file,go-template,go-template-file,json,jsonpath,jsonpath-file,name,template,templatefile,wide,yaml
master $ k get pod -o wide
NAME             READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES
ubuntu-sleeper   1/1     Running   0          33s   10.244.1.3   node01   <none>           <none>
master $
master $ k describe pod ubuntu-sleeper -o yaml | grep -i securitycontext -A6
Error: unknown shorthand flag: 'o' in -o
See 'kubectl describe --help' for usage.
master $ k get pod ubuntu-sleeper -o yaml | grep -i securitycontext -A6
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: python-requests
--------

	# k exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'
	Thu Apr 19 11:14:00 UTC 2012
	
	
	
------- Network Policies ----------

- search for "network policy" in kubernetes.io page

# kubectl get networkpolicy

