Commands

# alias k=kubectl

# export do="--dry-run=client -o yaml"

- Create pod
	
	# k run nginx --image=nginx $do
	# k run nginx --image=nginx $do > nginx.yaml

	# kubectl run nginx --image=nginx --restart=Never

- Describe pod

	# k describe pod pod-name

	# k get pods -o wide

- Create deployment
	
	# k create deploy deploy1 --image=nginx $do

	# k create deploy deploy1 --image=nginx $do > deploy1.yaml

- Create replicaset

	- Add additional pods in replicaset, edit the file and give below command

		# k replace -f replicaset-def.yaml

	- To scale the replicaset

		# k scale --replicas=6 -f replicaset-def.yaml

		# k scale --replicas=6 replicaset replicaset-name


	# k describe rs replicaset-name

- Create deployments

	# k create deployment --image=nginx nginx

	# k create deployment --image=nginx nginx --dry-run=client -o yaml

		- To change the replicas create file and edit the replicas

	# k create deployment --image=2.4-alpine httpd-frontend $do

		- kubectl create deployment does not have a --replicas option. You could first create it and then scale it using the kubectl scale command.


- namespace

	- To list the pod in a given namespace

		# kubectl -n kube-system get pods 

	- To create a pod in different namespace

		# kubectl create -f pod-def.yaml --namespace=dev

	- Create namespace

		# kubectl create ns ns-name

	- To switch to dev namespace permanently

		# kubectl config set-context $(kubectl config current-context) --namespace=dev

		where,
				$ k config current-context
				kubernetes-admin@kubernetes

		# kubectl get pods --all-namespaces


	-** Create a Pod instead of a deployment(old version) -- don't use it
		# kubectl run redis --image=redis --restart=Never --dry-run -o yaml


- service

	# kubectl describe svc svc_name

	- Create a nodePort service for a deployment

		# kubectl expose deployment webapp-deployment --type=NodePort --target-port=8080 --port=8080 --name=webapp-service --dry-run=client -o yaml > svc.yaml

			-  You cannot pass in selectors as an option.
			- after that edit svc.yaml and add the "nodePort: 30080" and save and create svc.

		# kubectl get ep webapp-service


	- Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

		# kubectl expose pod redis --port=6379 --name redis-service --dry-run -o yaml

			- This will automatically use the pod's labels as selectors

	
	- Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:

		# kubectl expose pod nginx --port=80 --name nginx-service --dry-run -o yaml

			-  but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod